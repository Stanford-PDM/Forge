package engine;

import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.SMIO;
import com.maxeler.maxcompiler.v2.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;

/*
 * @DummyMemLib: Library that provides the same accessor methods as Block RAM
 * but is just a dummy register.
 */
class DummyMemLib extends KernelLib {

  DFEType type;
  DFEVar stream;
  DummyMemLib(KernelLib owner, DFEType type) {
    super(owner);
    this.type = type;
    this.stream = type.newInstance(this);
  }

  DFEVar connectRport(DFEVar srcAddr) {
    return stream;
  }

  void connectWport(DFEVar dstAddr, DFEVar dstData, DFEVar en) {
    stream <== Reductions.streamHold(dstAddr.cast(type) ^ dstData.cast(type), en);
  }

  void connectWport(DFEVar dstAddr, DFEVar dstData, DFEVar en, int start, int stride) {
    stream <== Reductions.streamHold(dstAddr.cast(type) ^ dstData.cast(type), en);
  }

  void connectWport(DFEVar dstAddr, DFEVar dstData) {
    stream <== Reductions.streamHold(dstAddr.cast(type) ^ dstData.cast(type), constant.var(true));
  }

}
