
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _Nosynth:

Nosynth
=======

<auto-generated stub>

Related methods
---------------

.. parsed-literal::

  :maroon:`def` Accel(x:  => Unit): Unit




*********

.. parsed-literal::

  :maroon:`def` \_\_ifThenElse(x: Boolean, y:  => T, z:  => T): T




*********

.. parsed-literal::

  :maroon:`def` \_\_whileDo(x:  => Boolean, y:  => Unit): Unit




*********

.. parsed-literal::

  :maroon:`def` assert(x: :doc:`bit`): Unit




*********

.. parsed-literal::

  :maroon:`def` getArg(x: :doc:`reg`\[T\]): T




*********

.. parsed-literal::

  :maroon:`def` getMem(x: :doc:`offchipmem`\[T\]): :doc:`forgearray`\[T\]




*********

.. parsed-literal::

  :maroon:`def` println(x: Any): Unit




*********

.. parsed-literal::

  :maroon:`def` println(): Unit




*********

.. parsed-literal::

  :maroon:`def` setArg(x: :doc:`reg`\[T\], y: T): Unit




*********

.. parsed-literal::

  :maroon:`def` setArg(x: :doc:`reg`\[T\], y: Int): Unit




*********

.. parsed-literal::

  :maroon:`def` setArg(x: :doc:`reg`\[T\], y: Long): Unit




*********

.. parsed-literal::

  :maroon:`def` setArg(x: :doc:`reg`\[T\], y: Float): Unit




*********

.. parsed-literal::

  :maroon:`def` setArg(x: :doc:`reg`\[T\], y: Double): Unit




*********

.. parsed-literal::

  :maroon:`def` setMem(x: :doc:`offchipmem`\[T\], y: :doc:`forgearray`\[T\]): Unit




