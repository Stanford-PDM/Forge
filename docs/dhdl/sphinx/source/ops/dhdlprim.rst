
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _DHDLPrim:

DHDLPrim
========

<auto-generated stub>

Related methods
---------------

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`bit`, y: :doc:`bit`): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Int, y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Int, y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fixpt`\[S,I,F\], y: Int): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fltpt`\[G,E\], y: Int): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Long, y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Long, y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fixpt`\[S,I,F\], y: Long): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fltpt`\[G,E\], y: Long): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Float, y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Float, y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fixpt`\[S,I,F\], y: Float): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fltpt`\[G,E\], y: Float): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Double, y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: Double, y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fixpt`\[S,I,F\], y: Double): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` \_\_equal(x: :doc:`fltpt`\[G,E\], y: Double): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` abs(x: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` abs(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` abs\_fix(x: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` abs\_flt(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` add\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` add\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` and\_bit(x: :doc:`bit`, y: :doc:`bit`): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` and\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` div\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` div\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` eql\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` eql\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` exp(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` exp\_flt(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` leq\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` leq\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` log(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` log\_flt(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` lsh\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,B0\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` lt\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` lt\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` mod\_fix(x: :doc:`fixpt`\[S,I,B0\], y: :doc:`fixpt`\[S,I,B0\]): :doc:`fixpt`\[S,I,B0\]




*********

.. parsed-literal::

  :maroon:`def` mul\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` mul\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` neg\_fix(x: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` neg\_flt(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` neq\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` neq\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` not\_bit(x: :doc:`bit`): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` or\_bit(x: :doc:`bit`, y: :doc:`bit`): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` or\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` pow(x: T, y: Int)(:maroon:`implicit` ev0: Arith[T]): T




*********

.. parsed-literal::

  :maroon:`def` rsh\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,B0\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` sqrt(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` sqrt\_flt(x: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` sub\_fix(x: :doc:`fixpt`\[S,I,F\], y: :doc:`fixpt`\[S,I,F\]): :doc:`fixpt`\[S,I,F\]




*********

.. parsed-literal::

  :maroon:`def` sub\_flt(x: :doc:`fltpt`\[G,E\], y: :doc:`fltpt`\[G,E\]): :doc:`fltpt`\[G,E\]




*********

.. parsed-literal::

  :maroon:`def` xnor\_bit(x: :doc:`bit`, y: :doc:`bit`): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` xor\_bit(x: :doc:`bit`, y: :doc:`bit`): :doc:`bit`




*********

.. parsed-literal::

  :maroon:`def` zero()(:maroon:`implicit` ev0: Num[T]): T




