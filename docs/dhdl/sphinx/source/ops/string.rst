
.. role:: black
.. role:: gray
.. role:: silver
.. role:: white
.. role:: maroon
.. role:: red
.. role:: fuchsia
.. role:: pink
.. role:: orange
.. role:: yellow
.. role:: lime
.. role:: green
.. role:: olive
.. role:: teal
.. role:: cyan
.. role:: aqua
.. role:: blue
.. role:: navy
.. role:: purple

.. _String:

String
======

<auto-generated stub>

Infix methods
-------------

.. parsed-literal::

  :maroon:`def` contains(y: :doc:`string`): Boolean




*********

.. parsed-literal::

  :maroon:`def` endsWith(y: :doc:`string`): Boolean




*********

.. parsed-literal::

  :maroon:`def` fcharAt(y: Int): Char




*********

.. parsed-literal::

  :maroon:`def` fsplit(y: :doc:`string`, numSplits: Int = 0): :doc:`forgearray`\[:doc:`string`\]




*********

.. parsed-literal::

  :maroon:`def` getBytes(): :doc:`forgearray`\[Byte\]




*********

.. parsed-literal::

  :maroon:`def` length(): Int




*********

.. parsed-literal::

  :maroon:`def` replaceAllLiterally(y: :doc:`string`, z: :doc:`string`): :doc:`string`




*********

.. parsed-literal::

  :maroon:`def` slice(y: Int, z: Int): :doc:`string`




*********

.. parsed-literal::

  :maroon:`def` split(y: :doc:`string`, numSplits: Int = 0): :doc:`forgearray`\[:doc:`string`\]




*********

.. parsed-literal::

  :maroon:`def` startsWith(y: :doc:`string`): Boolean




*********

.. parsed-literal::

  :maroon:`def` substring(y: Int): :doc:`string`




*********

.. parsed-literal::

  :maroon:`def` substring(y: Int, z: Int): :doc:`string`




*********

.. parsed-literal::

  :maroon:`def` to(): R




*********

.. parsed-literal::

  :maroon:`def` toBoolean(): Boolean




*********

.. parsed-literal::

  :maroon:`def` toDouble(): Double




*********

.. parsed-literal::

  :maroon:`def` toFloat(): Float




*********

.. parsed-literal::

  :maroon:`def` toInt(): Int




*********

.. parsed-literal::

  :maroon:`def` toLong(): Long




*********

.. parsed-literal::

  :maroon:`def` toLowerCase(): :doc:`string`




*********

.. parsed-literal::

  :maroon:`def` toUpperCase(): :doc:`string`




*********

.. parsed-literal::

  :maroon:`def` trim(): :doc:`string`




