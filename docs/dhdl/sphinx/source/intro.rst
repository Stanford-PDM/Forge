Introduction
============


 DHDL is an intermediate language for describing hardware datapaths. A DHDL program describes a dataflow graph consisting of various kinds of nodes
 connected to each other by data dependencies. Each node in a DHDL program corresponds to a architectural template. DHDL is represented
 in-memory as a parameterized, hierarchical dataflow graph.

 Templates in DHDL capture parallelism, locality, and access pattern information at multiple levels. This dramatically simplifies coarse-grained pipelining and
 enables us to explicitly capture and represent a large space of designs which other tools cannot capture, as shown in Figure 2.
 Every template is parameterized. A specific hardware design point is instantiated from a DHDL description by instantiating all the templates in the design with concrete
 parameter values passed to the program. DHDL heavily uses metaprogramming, so these values are passed in as arguments to the DHDL program. The
 generated design instance is represented internally as a graph that can be analyzed to provide estimates of metrics such as area and cycle count. The parameters
 used to create the design instance can be automatically generated by a design space exploration tool.
 

This document was auto-generated using `Sphinx <http://www.sphinx-doc.org/en/stable/>`_.
For corrections, post an issue on `GitHub Issues <https://github.com/stanford-ppl/Forge/issues/>`_ .

